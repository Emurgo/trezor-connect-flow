/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.21.0
 * @flow
 */

declare export { UI_EVENT, DEVICE_EVENT } from "@trezor/connect-web";
declare type ValueOf<T> = $Values<T>;
export type Manifest = {|
  appName: string,
  appUrl: string,
  email: string,
|};
export type UiEvent = any;
export type DeviceEvent = any;
declare type HDNodeType = {|
  depth: number,
  fingerprint: number,
  child_num: number,
  chain_code: string,
  private_key?: string,
  public_key: string,
|};
export type CardanoPublicKey = {|
  node: HDNodeType,
  publicKey: string,
  path: number[],
  serializedPath: string,
|};
export type Unsuccessful = {|
  success: false,
  payload: {|
    error: string,
    code?: string,
  |},
|};
export type Success<T> = {|
  success: true,
  payload: T,
|};
export type Response<T> = Promise<Success<T> | Unsuccessful>;
declare type CardanoTxSigningModeType = 0 | 1 | 2 | 3;
declare export var CardanoTxSigningMode: {
  [key: string]: CardanoTxSigningModeType,
};
export type CardanoSignTransaction = {|
  inputs: CardanoInput[],
  outputs: CardanoOutput[],
  fee: string,
  ttl?: string,
  certificates?: CardanoCertificate[],
  withdrawals?: CardanoWithdrawal[],
  validityIntervalStart?: string,
  auxiliaryData?: CardanoAuxiliaryData,
  mint?: CardanoMint,
  scriptDataHash?: string,
  collateralInputs?: CardanoCollateralInput[],
  requiredSigners?: CardanoRequiredSigner[],
  collateralReturn?: CardanoOutput,
  totalCollateral?: string,
  referenceInputs?: CardanoReferenceInput[],
  additionalWitnessRequests?: (string | number[])[],
  protocolMagic: number,
  networkId: number,
  signingMode: CardanoTxSigningModeType,
  derivationType?: CardanoDerivationTypeType,
  includeNetworkId?: boolean,
  tagCborSets?: boolean,
|};
export type CardanoInput = {|
  path?: string | number[],
  prev_hash: string,
  prev_index: number,
|};
export type CardanoToken = {|
  assetNameBytes: string,
  amount?: string,
  mintAmount?: string,
|};
export type CardanoAssetGroup = {|
  policyId: string,
  tokenAmounts: CardanoToken[],
|};
export type CardanoCertificatePointer = {|
  blockIndex: number,
  txIndex: number,
  certificateIndex: number,
|};
declare type CardanoAddressTypeType =
  | 0
  | 1
  | 2
  | 3
  | 4
  | 5
  | 6
  | 7
  | 8
  | 14
  | 15;
declare export var CardanoAddressType: {
  [key: string]: CardanoAddressTypeType,
};
export type CardanoAddressParameters = {|
  addressType: CardanoAddressTypeType,
  path?: string | number[],
  stakingPath?: string | number[],
  stakingKeyHash?: string,
  certificatePointer?: CardanoCertificatePointer,
  paymentScriptHash?: string,
  stakingScriptHash?: string,
|};
declare type CardanoDerivationTypeType = 0 | 1 | 2;
declare export var CardanoDerivationType: {
  [key: string]: CardanoDerivationTypeType,
};
declare type CardanoTxOutputSerializationFormatType = 0 | 1;
declare export var CardanoTxOutputSerializationFormat: {
  [key: string]: CardanoTxOutputSerializationFormatType,
};
export type CardanoOutput =
  | {|
      addressParameters: CardanoAddressParameters,
      amount: string,
      tokenBundle?: CardanoAssetGroup[],
      datumHash?: string,
      format?: CardanoTxOutputSerializationFormatType,
      inlineDatum?: string,
      referenceScript?: string,
    |}
  | {|
      address: string,
      amount: string,
      tokenBundle?: CardanoAssetGroup[],
      datumHash?: string,
      format?: CardanoTxOutputSerializationFormatType,
      inlineDatum?: string,
      referenceScript?: string,
    |};
declare export var CardanoCertificateType: {|
  +STAKE_REGISTRATION: 0,
  +STAKE_DEREGISTRATION: 1,
  +STAKE_DELEGATION: 2,
  +STAKE_POOL_REGISTRATION: 3,
  +STAKE_REGISTRATION_CONWAY: 7,
  +STAKE_DEREGISTRATION_CONWAY: 8,
  +VOTE_DELEGATION: 9,
|};
export type CardanoCertificate = {|
  type: ValueOf<typeof CardanoCertificateType>,
  path?: string | number[],
  pool?: string,
  poolParameters?: CardanoPoolParameters,
  scriptHash?: string,
  keyHash?: string,
  deposit?: string,
  dRep?: CardanoDRep,
|};
declare export var CardanoDRepType: {|
  +KEY_HASH: 0,
  +SCRIPT_HASH: 1,
  +ABSTAIN: 2,
  +NO_CONFIDENCE: 3,
|};
export type CardanoDRep = {|
  type: ValueOf<typeof CardanoDRepType>,
  keyHash?: string,
  scriptHash?: string,
|};
export type CardanoPoolParameters = {|
  poolId: string,
  vrfKeyHash: string,
  pledge: string,
  cost: string,
  margin: CardanoPoolMargin,
  rewardAccount: string,
  owners: CardanoPoolOwner[],
  relays: CardanoPoolRelay[],
  metadata: CardanoPoolMetadata,
|};
export type CardanoPoolOwner = {|
  stakingKeyPath?: string | number[],
  stakingKeyHash?: string,
|};
declare type CardanoPoolRelayTypeType = 0 | 1 | 2;
declare export var CardanoPoolRelayType: {
  [key: string]: CardanoPoolRelayTypeType,
};
export type CardanoPoolRelay = {|
  type: CardanoPoolRelayTypeType,
  ipv4Address?: string,
  ipv6Address?: string,
  port?: number,
  hostName?: string,
|};
export type CardanoPoolMetadata = {|
  url: string,
  hash: string,
|};
export type CardanoPoolMargin = {|
  numerator: string,
  denominator: string,
|};
export type CardanoWithdrawal = {|
  path?: string | number[],
  amount: string,
  scriptHash?: string,
  keyHash?: string,
|};
export type CardanoGovernanceRegistrationDelegation = {|
  votePublicKey: string,
  weight: number,
|};
declare type CardanoGovernanceRegistrationFormatType = 0 | 1;
declare export var CardanoGovernanceRegistrationFormat: {
  [key: string]: CardanoGovernanceRegistrationFormatType,
};
export type CardanoGovernanceRegistrationParameters = {|
  votePublicKey?: string,
  stakingPath: string | number[],
  paymentAddressParameters: CardanoAddressParameters,
  nonce: string,
  format?: CardanoGovernanceRegistrationFormatType,
  delegations?: CardanoGovernanceRegistrationDelegation[],
  votingPurpose?: number,
|};
export type CardanoAuxiliaryData = {|
  hash?: string,
  cVoteRegistrationParameters?: CardanoGovernanceRegistrationParameters,
|};
export type CardanoMint = CardanoAssetGroup[];
export type CardanoCollateralInput = {|
  path?: string | number[],
  prev_hash: string,
  prev_index: number,
|};
export type CardanoRequiredSigner = {|
  keyPath?: string | number[],
  keyHash?: string,
|};
export type CardanoReferenceInput = {|
  prev_hash: string,
  prev_index: number,
|};
export type CardanoTxWitnessTypeType = 0 | 1;
declare export var CardanoTxWitnessType: {
  [key: string]: CardanoTxWitnessTypeType,
};
export type CardanoSignedTxWitness = {|
  type: CardanoTxWitnessTypeType,
  pubKey: string,
  signature: string,
  chainCode?: string,
|};
export type CardanoTxAuxiliaryDataSupplementTypeType = 0 | 1;
declare export var CardanoTxAuxiliaryDataSupplementType: {
  [key: string]: CardanoTxAuxiliaryDataSupplementTypeType,
};
export type CardanoAuxiliaryDataSupplement = {|
  type: CardanoTxAuxiliaryDataSupplementTypeType,
  auxiliaryDataHash: string,
  governanceSignature?: string,
|};
export type CardanoSignedTxData = {|
  hash: string,
  witnesses: CardanoSignedTxWitness[],
  auxiliaryDataSupplement?: CardanoAuxiliaryDataSupplement,
|};
export type CommonParams = {|
  device?: {|
    state?: string,
    instance?: number,
  |},
  useEmptyPassphrase?: boolean,
  useEventListener?: boolean,
  allowSeedlessDevice?: boolean,
  keepSession?: boolean,
  override?: boolean,
  skipFinalReload?: boolean,
  useCardanoDerivation?: boolean,
|};
export type Params<T> = {|
  ...CommonParams,
  ...T,
  ...{|
    bundle?: void,
  |},
|};
export type CardanoGetAddress = {|
  addressParameters: CardanoAddressParameters,
  protocolMagic: number,
  networkId: number,
  address?: string,
  showOnTrezor?: boolean,
  derivationType?: CardanoDerivationTypeType,
|};
export type CardanoAddress = {|
  addressParameters: CardanoAddressParameters,
  protocolMagic: number,
  networkId: number,
  serializedPath: string,
  serializedStakingPath: string,
  address: string,
|};
export type CardanoSignMessage = {|
  path: string | number[],
  payload: string,
  preferHexDisplay: boolean,
  networkId?: number,
  protocolMagic?: number,
  addressParameters?: CardanoAddressParameters,
  derivationType: CardanoDerivationTypeType,
|};
export type CardanoSignMessageResponse = {|
  payload: string,
  signature: string,
  headers: {|
    protected: {|
      1: -8,
      address: string,
    |},
    unprotected: {|
      version: number,
      hashed: boolean,
    |},
  |},
  pubKey: string,
|};
declare export default class TrezorConnect {
  static init(x: {|
    manifest: Manifest,
  |}): Promise<void>;
  static manifest(manifest: Manifest): void;
  static on(event: any, callback: (_: any) => void): void;
  static off(event: any, callback: (_: any) => void): void;
  static dispose(): void;
  static cardanoGetPublicKey(x: {|
    path: number[],
    showOnTrezor: boolean,
  |}): Response<CardanoPublicKey>;
  static cardanoSignTransaction(
    params: Params<CardanoSignTransaction>
  ): Response<CardanoSignedTxData>;
  static cardanoGetAddress(
    params: Params<CardanoGetAddress>
  ): Response<CardanoAddress>;
  static cardanoSignMessage(
    params: Params<CardanoSignMessage>
  ): Response<CardanoSignMessageResponse>;
}
